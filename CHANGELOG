## HISTORY

- v0.4.1
  - public `dbglog` subpackage, added Err/Wrn/Colored
  - added ability to disable dbglog.Log at runtime
  - improved internal functions (tool.Valfmt, cl.SetUnexportedFieldIfMap, ...)
  - improved dbglog.Log outputting
  - fixed bugs

- v0.4.0
  - fixed autonew when copying to nil member
  - improved diff on chan
  - better logging (verbose) with colors

- v0.3.1
  - changed: `dbglog.LogValid` is constant now
  - improved code style
  - DeepCopy:
    - passing nil parameters can return safely without panic any more
  - DeepDiff:
    - imp/fea: `diff.WithStripPointerAtFirst` - locate the final objects and compare them
    - imp/fea: `diff.WithTreatEmptyStructPtrAsNilPtr` - when comparing two pointers in struct field loop, assume nil and pointer to an empty struct is identical
    - imp/fea: `diff.WithCompareDifferentTypeStructs` - you can compare two struct with different type, their fields could be `diff` by its name
    - imp/fea: `diff.WithIgnoreUnmatchedFields` - this is default option for `diff.WithCompareDifferentTypeStructs(true)` mode, the field names unmatched couldn't take effects to comparing result
    - imp/fea: `diff.WithCompareDifferentSizeArrays` - `[2]string{"1","2"}` and `[3]string{"1","2",<empty>}` can be assumed as identity
    - By default,
      - they're assumed as identity: nil and zero array/map.
      - they're not identical: nil ptr to struct, and ptr to empty struct (can be overridden by `WithTreatEmptyStructPtrAsNilPtr`).
      - the slice elements' order is sensitive, except you're `diff` with `WithSliceOrderedComparison(true)`.

- v0.2.56
  - changed: `InvalidStrategy` is -1 now since we got untyped int overflow error in auto-gen code by stringer

- v0.2.53
  - improved code style, format, ...
  - to fore-prevent low-performance and large-memory usage when retrieve expanded fields from a very large struct, use `cms.ByOrdinal` instead default `cms.ByName`
  - added new strategy `cms.Flat` and field tag to identify a pointer should be shallow copy to target field,
    ```go
    package main
    type A struct {
        field1 *ComplexStruct `copy:",flat"`
    }
    ```
  - `evendeep` supports to go1.11 currently

### v0.2.51

- temporary build: fixing array/slice copying logic

### v0.2.50

- first public release

I had this plan many years, but the recent fresh work is started from 2022-02-17, it's called as `evendeep` and get its first release finally.
